
    
// Javascript program for Bellman-Ford's single source
// shortest path algorithm.
 
// The main function that finds shortest
// distances from src to all other vertices
// using Bellman-Ford algorithm. The function
// also detects negative weight cycle
// The row graph[i] represents i-th edge with
// three values u, v and w.

//https://www.geeksforgeeks.org/bellman-ford-algorithm-simple-implementation/
function BellmanFord(graph, V, E, src)
{
    // Initialize distance of all vertices as infinite.
    var dis = Array(V).fill(1000000000);
 
    // initialize distance of source as 0
    dis[src] = 0;
 
    // Relax all edges |V| - 1 times. A simple
    // shortest path from src to any other
    // vertex can have at-most |V| - 1 edges
    for (var i = 0; i < V ; i++)
    {
        for (var j = 0; j < E; j++)
        {
            if ((dis[graph[j][0]] + graph[j][2]) < dis[graph[j][1]])
                dis[graph[j][1]] = dis[graph[j][0]] + graph[j][2];
        }
    }
 
    // check for negative-weight cycles.
    // The above step guarantees shortest
    // distances if graph doesn't contain
    // negative weight cycle. If we get a
    // shorter path, then there is a cycle.

    //We dont have negative weights so we can ignore this
    
    for (var i = 0; i < E; i++)
    {
        var x = graph[i][0];
        var y = graph[i][1];
        var weight = graph[i][2];
        if ((dis[x] != 1000000000) &&
                (dis[x] + weight < dis[y]))
            document.write("Graph contains negative" +
                                        " weight cycle<br>");
    }
    
   
    //document.write("Vertex Distance from Source<br>");
    for (var i = 0; i < V; i++)
        console.log(i + "   " + dis[i] + "<br>");
        //document.write(i + "   " + dis[i] + "<br>");
}
 
// Driver code
var V = 91; // Number of vertices in graph
var E = 116; // Number of edges in graph
 
//Put this in the beginning of the script
var start = new Date().getTime(); 

// Every edge has three values (u, v, w) where
// the edge is from vertex u to v. And weight
// of the edge is w.
var graph = [
    //1
    [ 1, 2, 28.07 ], [ 1, 3, 72.21 ],
    //2
    [ 2, 1, 28.07 ], [ 2, 4, 72.21 ],
    //3
    [ 3, 1, 72.21 ], [ 3, 4, 28.07 ],
    //4
    [ 4, 2, 72.21 ], [ 4, 3, 28.07 ], [ 4, 6, 49.99 ],
    //5
    [ 5, 6, 22.01 ], [ 5, 7, 85.05 ],
    
    //6
    [ 6, 5, 22.01 ], [ 6, 8, 86.05 ],
    //7
    [ 7, 5, 86.05 ], [ 7, 8, 22.01 ], [ 7, 17, 40.56 ],
    //8
    [ 8, 6, 86.05 ], [ 8, 7, 22.01 ], [ 8, 9, 83.57 ],
    //9
    [ 9, 8, 83.57 ], [ 9, 10, 73.42 ],
    //10
    [ 10, 9, 73.42 ], [ 10, 21, 112.77 ],
    
    //11
    [ 11, 27, 121.99 ], [ 11, 12, 88.43 ],
    //12
    [ 12, 11, 88.43 ], [ 12, 13, 40.93 ],
    //13
    [ 13, 12, 40.93 ], [ 13, 14, 16.90 ], [ 13, 15, 100.93 ],
    //14
    [ 14, 13, 16.90 ], [ 14, 26, 65.42 ],
    //15
    [ 15, 13, 100.93 ], [ 15, 16, 23.53 ],[ 15, 18, 68.59 ], [ 15, 25, 60.37 ],
    
    //16
    [ 16, 15, 23.53 ], [ 16, 17, 24.05 ],
    //17
    [ 17, 7, 40.56 ], [ 17, 16, 24.05 ],
    //18
    [ 18, 15, 68.59 ], [ 18, 19, 40.60 ], [ 18, 20, 71.78 ],
    //19
    [ 19, 18, 40.60 ],
    //20
    [ 20, 18, 71.78 ], [ 20, 21, 17.49 ], [ 20, 22, 40.93 ],
    
    //21
    [ 21, 20, 17.49 ], [ 21, 23, 40.93 ], [ 21, 10, 112.77 ],
    //22
    [ 22, 20, 40.93 ], [ 22, 23, 17.49 ],
    //23
    [ 23, 21, 40.93 ], [ 23, 22, 17.49 ], [ 23, 41, 76.07 ],
    //24
    [ 24, 25, 33.53 ], 
    //25
    [ 25, 15, 60.37 ], [ 25, 24, 33.53 ], [ 25, 36, 55.52 ],
    
    //26
    [ 26, 14, 65.42 ], 
    //27
    [ 27, 11, 121.99 ], [ 27, 28, 27.33 ], [ 27, 50, 76.91 ],
    //28
    [ 28, 27, 27.33 ], [ 28, 29, 24.88 ], [ 28, 30, 46.47 ],
    //29
    [ 29, 28, 24.88 ], [ 29, 31, 46.47 ],
    //30
    [ 30, 28, 46.47 ], [ 30, 31, 24.88 ], [ 30, 32, 56.43 ],
    
    //31
    [ 31, 29, 46.47 ], [ 31, 30, 24.88 ], [ 31, 33, 56.43 ],
    //32
    [ 32, 30 , 56.34 ], [ 32, 33 , 24.88 ], [ 32, 35 , 44.03 ],
    //33
    [ 33, 31 ,56.34  ], [ 33, 32 , 24.88 ], [ 33, 34 , 41.96 ],
    //34
    [ 34, 33 , 41.96 ], [ 34, 35 , 24.88 ], [ 34, 47 , 59.04 ],
    //35
    [ 35, 32 , 44.03  ], [ 35, 34, 24.88 ], [ 35, 36, 68.61 ],
    
    //36
    [ 36, 25 ,55.52  ], [ 36, 35, 68.61 ], [ 36, 37, 20.30  ],
    //37
    [ 37, 36 , 20.30 ], [ 37,38 , 33.23 ], [ 37, 40 , 56.39 ],
    //38
    [ 38, 37, 20.30 ], [ 38, 39, 56.39 ], [ 38, 45, 38.63 ],
    //39
    [ 39, 38, 56.39 ], [ 39, 40, 33.23 ],
    //40
    [ 40, 37 , 56.43 ], [ 40, 39 , 33.23  ], [ 40, 41 , 77.76 ],

    //---//
    //41
    [ 41, 23, 76.07 ], [ 41, 40, 77.76  ], [ 41, 42, 66.96  ],
    //42
    [ 42, 41 , 66.96 ], [ 42, 43, 26.07 ],
    //43
    [ 43, 42 , 26.07 ], [ 43, 57 , 56.66 ],
    //44
    [ 44, 45, 48.41 ],
    //45
    [ 45, 38, 38.63 ], [ 45, 44, 48.41 ], [ 45, 46, 21.37 ],
    
    //46
    [ 46, 45 , 21.37 ], [ 46, 55,55.36  ],
    //47
    [ 47,34 , 59.04 ], [ 47, 48, 36.71 ], [ 47, 54, 68.52 ],
    //48
    [ 48, 47, 36.71 ], [ 48, 49 , 83.65 ],[ 48, 53, 68.52 ],
    //49
    [ 49, 48, 83.65 ], [ 49, 50, 58.70 ],[ 49, 52, 68.52 ],
    //50
    [ 50, 27 , 76.91 ], [ 50, 49, 58.70 ],[ 50, 51,68.52  ],
    
    //51
    [ 51, 50 , 68.52 ], [ 51, 52, 58.7 ],[ 51, 66,  67.5],
    //52
    [ 52, 49 , 68.52 ], [ 52, 51, 58.7 ],[ 52, 53, 83.65 ],
    //53
    [ 53, 48, 68.52 ], [ 53, 52, 83.65 ],[ 53, 54, 36.71 ],[ 53, 63, 67.5],
    //54
    [ 54, 47 , 68.52 ], [ 54,53 ,36.71  ],[ 54,55 , 72.51  ],
    //55
    [ 55, 46 , 55.36 ], [ 55, 54 , 72.51 ],[ 55,56 , 31.68 ],
    
    //56
    [ 56, 55 , 31.68  ], [ 56, 57 , 103.19 ],[ 56, 61, 67.50  ],
    //57
    [ 57, 43,56.66  ], [ 57, 56, 103.19 ],[ 57, 58 , 67.5 ],
    //58
    [ 58,57 , 67.5 ], [ 58,59 ,33.65  ],[ 58, 77, 133.44 ],
    //59
    [ 59, 58, 33.65 ], [ 59,60 , 39.64 ],
    //60
    [ 60, 59, 39.64 ], [ 60,61 ,27.03  ],
    
    //61
    [ 61,56 , 67.5 ], [ 61,60 , 27.03], [ 61,62 ,68.87 ],[ 61,70 ,42.19  ],
    //62
    [ 62,61 , 68.87  ], [ 62, 63, 72.36 ],
    //63
    [ 63, 53 , 67.50 ], [ 63,62 ,72.36  ],[ 63, 64, 63.32 ], [ 63,69 , 49.15 ],
    //64
    [ 64,63 , 63.32  ], [ 64, 65, 34.25  ],[ 64, 68, 49.15 ],
    //65
    [ 65,64 , 34.25 ], [ 65, 66, 42.98 ],
    
    //66
    [ 66, 51, 67.5], [ 66, 65, 42.98 ],[ 66, 67, 62.25 ],
    //67
    [ 67, 66, 62.25 ], [ 67, 73, 69.73 ],
    //68
    [ 68, 64, 49.15  ], [ 68, 69, 64.08 ],
    //69
    [ 69, 63, 49.15  ], [ 69, 68, 64.08  ], [ 69, 72, 42.06 ],
    //70
    [ 70, 61, 42.19 ], [ 70, 71, 43.33  ],
    
    //71
    [ 71,70 , 43.33 ], [ 71, 72, 138.09 ],[ 71, 76, 47.59 ],
    //72
    [ 72,69 , 42.06 ], [ 72,71 , 138.09 ],[ 72, 74, 43.3 ],
    //73
    [ 73, 67, 69.73 ], [ 73, 82,68.52  ],[ 73,74 , 137.54  ],
    //74
    [ 74, 72, 43.3 ], [ 74, 73, 137.54],[ 74, 75, 46.73 ],[ 74, 89,24.17  ],
    //75
    [ 75, 74 , 46.73 ], [ 75, 76, 96.75 ],
    
    //76
    [ 76, 75 , 96.75 ], [ 76, 71, 47.59 ],[ 76, 77, 102.34 ],
    //77
    [ 77, 58 , 133.44 ], [ 77, 76 , 102.34 ],
    //78
    [ 78, 89, 37.35 ], 
    //79
    [ 79, 89 , 67.06 ], [ 79, 80 , 36.95 ],[ 79, 90 , 54.52 ],
    //80
    [ 80, 79, 36.95 ], [ 80, 81, 41.77 ],

    //81
    [ 81, 80, 41.77 ], [ 81, 90, 52.20 ],
    //82
    [ 82, 91, 55.46 ], [ 82, 73, 68.52 ],
    //83
    [ 83, 84, 105.23 ], [ 83, 91, 66.07 ],
    //84
    [ 84, 83, 105.23 ], [ 84, 85, 68.85 ],
    //85
    [ 85, 84, 68.85 ], [ 85, 86, 88.90 ],
    
    //86
    [ 86, 85, 88.90 ], [ 86, 87, 45.39 ],
    //87
    [ 87, 86, 45.39 ], [ 87, 88, 28.62 ],
    //88
    [ 88, 87, 28.62 ],
    //89
    [ 89, 74, 24.17 ], [ 89, 78, 37.35 ],
    //90
    [ 90, 79, 54.52 ], [ 90, 81, 52.20 ],

    //91
    [ 91, 82, 55.46 ], [ 91, 83, 66.07 ]
];
BellmanFord(graph, V, E, 0);

//BellmanFord(graph, V, E, 57);
 
//Put this in the beginning of the script
//var start = new Date().getTime(); 

var end = new Date().getTime();
var time = end - start;
console.log('Execution time: ' + time);